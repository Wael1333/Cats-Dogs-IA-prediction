import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
import random
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from skimage.feature import hog

# Path to the dataset on Kaggle
dataset_path = '/kaggle/input/cats-dogs'

# Function to load and extract HOG features from images
def load_and_extract_hog_features(folder):
    features = []
    labels = []
    for label in ['Cats', 'Dogs']:
        path = os.path.join(folder, label)
        for filename in os.listdir(path):
            img = cv2.imread(os.path.join(path, filename), cv2.IMREAD_GRAYSCALE)  # Convert to grayscale
            if img is not None:
                img = cv2.resize(img, (64, 64))  # Resize to 64x64 pixels
                hog_features = hog(img, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), block_norm='L2-Hys')
                features.append(hog_features)
                labels.append(0 if label == 'Cats' else 1)
    return np.array(features), np.array(labels)

# Load and extract HOG features from images (Histogram of Oriented Gradients)
X, y = load_and_extract_hog_features(dataset_path)

# Split into training and testing sets (20%test 80%training)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the parameter grid for grid search [A higher value means a smaller margin and can lead to overfitting. Lower values lead to underfitting]
param_grid = {
    'C': [0.1, 1, 10, 100],
    'gamma': [0.01, 0.1, 1, 'scale']
}

# Perform grid search to find the best parameters
#SVC(kernel='rbf'): Use a Support Vector Classifier with a Radial Basis Function (RBF) kernel.
#param_grid: The parameter grid defined in the previous step.
#cv=3: 3-fold cross-validation to ensure the model is evaluated on different subsets of the training data.
#n_jobs=-1: Use all available CPU cores for computation.
#verbose=2: Print detailed logs of the grid search process.
grid_search = GridSearchCV(SVC(kernel='rbf'), param_grid, cv=3, n_jobs=-1, verbose=2)
grid_search.fit(X_train, y_train)

# Get the best parameters (The grid search will test different combinations of C and gamma to find the best parameters.)
best_params = grid_search.best_params_
print(f"Best parameters found: {best_params}")

# Train SVM classifier with the best parameters
svm = SVC(**best_params)
svm.fit(X_train, y_train)

# Make predictions
y_pred = svm.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')

# Classification report
print(classification_report(y_test, y_pred, target_names=['Cats', 'Dogs']))

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 6))
plt.imshow(cm, cmap='Blues', interpolation='nearest')
plt.title('Confusion Matrix')
plt.colorbar()
tick_marks = np.arange(2)
plt.xticks(tick_marks, ['Cats', 'Dogs'], rotation=45)
plt.yticks(tick_marks, ['Cats', 'Dogs'])
plt.xlabel('Predicted Label')
plt.ylabel('Real Value')
plt.show()

# Display a subset of test images with true and predicted labels
#cv2.cvtColor(image, conversion_code): Converts the color space of the image.
#cv2.COLOR_BGR2RGB: Specifies the conversion from BGR (Blue, Green, Red) to RGB (Red, Green, Blue).
#This conversion is necessary because OpenCV reads images in BGR format, but many other libraries (like Matplotlib) use RGB format for displaying images.
plt.figure(figsize=(12, 8))
num_images_to_display = 10
random_indices = random.sample(range(len(X_test)), num_images_to_display)
for i, idx in enumerate(random_indices):
    img = cv2.imread(os.path.join(dataset_path, 'Cats' if y_test[idx] == 0 else 'Dogs', f'{idx}.jpg'))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    true_label = 'Cat' if y_test[idx] == 0 else 'Dog'
    pred_label = 'Cat' if y_pred[idx] == 0 else 'Dog'
    plt.subplot(2, 5, i + 1)
    plt.imshow(img)
    plt.title(f'Real: {true_label}\nPredicted Label: {pred_label}')
    plt.axis('off')
plt.tight_layout()
plt.show()
